name: zama-kms-observability

# TODO: Add block-explorer for blockchain
# TODO: Add tempo and loki

x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"
    tag: "{{.Name}}"

services:
  # ********************
  # Telemetry Components
  # ********************

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:1.60
    container_name: jaeger
    command:
      - "--memory.max-traces=5000"
      - "--query.base-path=/jaeger/ui"
      - "--prometheus.server-url=http://${PROMETHEUS_ADDR}"
      - "--prometheus.query.normalize-calls=true"
      - "--prometheus.query.normalize-duration=true"
    deploy:
      resources:
        limits:
          memory: 400M
    restart: unless-stopped
    ports:
      - "${JAEGER_SERVICE_PORT}"         # Jaeger UI
      - "${OTEL_COLLECTOR_PORT_GRPC}"
    environment:
      - METRICS_STORAGE_TYPE=prometheus
    logging: *logging

  # Grafana
  grafana:
    image: grafana/grafana:11.2.0
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 100M
    restart: unless-stopped
    environment:
      - "GF_INSTALL_PLUGINS=grafana-opensearch-datasource"
    volumes:
      - ./observability/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./observability/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "${GRAFANA_SERVICE_PORT}"
    logging: *logging

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.108.0
    container_name: otelcol
    deploy:
      resources:
        limits:
          memory: 200M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    user: 0:0
    volumes:
      - ${HOST_FILESYSTEM}:/hostfs:ro
      - ${DOCKER_SOCK}:/var/run/docker.sock:ro
      - ${OTEL_COLLECTOR_CONFIG}:/etc/otelcol-config.yml
      - ${OTEL_COLLECTOR_CONFIG_EXTRAS}:/etc/otelcol-config-extras.yml
    ports:
      - "${OTEL_COLLECTOR_PORT_GRPC}"
      - "${OTEL_COLLECTOR_PORT_HTTP}"
    depends_on:
      - jaeger
    logging: *logging
    environment:
      - ENVOY_PORT
      - HOST_FILESYSTEM
      - OTEL_COLLECTOR_PORT_GRPC
      - OTEL_COLLECTOR_PORT_HTTP
      # - OTEL_COLLECTOR_HOST="otelcol"

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.54.1
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
      - --enable-feature=otlp-write-receiver
    volumes:
      - ./observability/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"
    logging: *logging

  # OpenSearch
  opensearch:
    image: opensearchproject/opensearch:2.16.0
    container_name: opensearch
    deploy:
      resources:
        limits:
          memory: 1G
    restart: unless-stopped
    environment:
      - cluster.name=demo-cluster
      - node.name=demo-node
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - OPENSEARCH_JAVA_OPTS=-Xms300m -Xmx300m
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - DISABLE_SECURITY_PLUGIN=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200"
    logging: *logging


  # Tempo
  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  # tempo-init:
  #   image: &tempoImage grafana/tempo:latest
  #   user: root
  #   entrypoint:
  #     - "chown"
  #     - "10001:10001"
  #     - "/var/tempo"
  #   volumes:
  #     - ./tempo-data:/var/tempo
  #
  # tempo:
  #   image: *tempoImage
  #   command: [ "-config.file=/etc/tempo.yaml" ]
  #   volumes:
  #     - ./observability/tempo/tempo.yaml:/etc/tempo.yaml
  #     - ./tempo-data:/var/tempo
  #   ports:
  #     - "14268"  # jaeger ingest
  #     - "3200"   # tempo
  #     - "4317"  # otlp grpc
  #     - "4318"  # otlp http
  #     - "9411"   # zipkin
  #   depends_on:
  #     - tempo-init

  # Loki
  # TODO: Add proper depends on dev-s3-mock (minio)
  # loki-read:
  #   image: grafana/loki:3.1.0
  #   command: "-config.file=/etc/loki/config.yaml -target=read"
  #   ports:
  #     - 3101:3100
  #     - 7946
  #     - 9095
  #   volumes:
  #     - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
  #   healthcheck:
  #     test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #
  # loki-write:
  #   image: grafana/loki:3.1.0
  #   command: "-config.file=/etc/loki/config.yaml -target=write"
  #   ports:
  #     - 3102:3100
  #     - 7946
  #     - 9095
  #   volumes:
  #     - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
  #   healthcheck:
  #     test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #
  # loki-backend:
  #   image: grafana/loki:3.1.0
  #   volumes:
  #     - ./observability/loki/loki-config.yaml:/etc/loki/config.yaml
  #   ports:
  #     - "3100"
  #     - "7946"
  #   command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
  #   healthcheck:
  #     test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
